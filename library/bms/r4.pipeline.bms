echo('Prepare ')
FileExists( var ${OUTPUTDIR} )
If( ${var} == 0 )
  MakeDirectory( ${OUTPUTDIR} )
EndIf( ${var} == 0 )
FileExists( var ${TEMPDIR} )
If( ${var} == 0 )
  MakeDirectory( ${TEMPDIR} )
EndIf( ${var} == 0 )


If( ${COPY_INPUTS_IMAGES} == TRUE )
  #copy image to process
 
  echo('inside copy inputs images true loop, and input type = ' ${INPUTTYPE})
  Set( ORIG_IMAGE ${INPUT}.${EXT} )


  If( ${INPUTTYPE} == 'DWI' )
     # Set( CmdTool ${ResampleVolume2PATH} )
      SetApp(Cmd @ResampleVolume2)
      SetAppOption(Cmd.inputVolume ${INPUTDIR}/${ORIG_IMAGE})
      SetAppOption(Cmd.outputVolume ${OUTPUTDIR}/${ROOTNAME}.nrrd)
      SetAppOption(Cmd.interpolationType 1)
      SetAppOption(Cmd.interpolationType.interpolationType 'nn')
      Set( DWImage ${ROOTNAME}.nrrd )
  EndIf( ${INPUTTYPE} == 'DWI' )
  If( ${INPUTTYPE} == 'scalar' )
      #Set( CmdTool ${ResampleVolume2PATH} )
      SetApp(Cmd @ResampleVolume2)
      SetAppOption(Cmd.inputVolume ${INPUTDIR}/${ORIG_IMAGE})
      SetAppOption(Cmd.outputVolume ${OUTPUTDIR}/${ROOTNAME}.nrrd)
      SetAppOption(Cmd.interpolationType 1)
      SetAppOption(Cmd.interpolationType.interpolationType 'nn')
      Set( B0_EXT nrrd )
      Set( B0 ${ROOTNAME}.${B0_EXT} )
  EndIf( ${INPUTTYPE} == 'scalar' )
  If( ${INPUTTYPE} == 'DTI' )
      #Set( CmdTool ${ResampleDTIPATH} )
      SetApp(Cmd @ResampleDTIlogEuclidean)
      SetAppOption(Cmd.input ${INPUTDIR}/${ORIG_IMAGE})
      SetAppOption(Cmd.output ${OUTPUTDIR}/${ROOTNAME}.nrrd)
      SetAppOption(Cmd.interpolation 1)
      SetAppOption(Cmd.interpolation.interpolation 'nn')
      Set( DTImage ${ROOTNAME}.nrrd )
  EndIf( ${INPUTTYPE} == 'DTI' )
  echo ('Copying input image to output directory for ' ${INPUTTYPE} ' type' ) 
 
  #### DEBUG NOTES : OKAY

  #Set( Cmd ${CmdTool} ${INPUTDIR}/${ORIG_IMAGE} ${OUTPUTDIR}/${ROOTNAME}.nrrd -i nn )

  Run( output ${Cmd} )
  Echo( ${output} )
  Set( EXT nrrd )
  Set( INPUT ${ROOTNAME} )
  Set( INPUTDIR ${OUTPUTDIR} )
  Set( DTI_DIR ${OUTPUTDIR} )
  #copy atlas
  echo ('Copying atlas image to output directory TEMPLATEDIR' ${TEMPLATEDIR} TEMPLATE ${TEMPLATE} )
  #Set( Cmd ${ResampleVolume2PATH} ${TEMPLATEDIR}/${TEMPLATE} ${OUTPUTDIR}/template.nrrd -i nn )
  SetApp(Cmd @ResampleVolume2)
  SetAppOption(Cmd.inputVolume ${TEMPLATEDIR}/${TEMPLATE})
  SetAppOption(Cmd.outputVolume ${OUTPUTDIR}/template.nrrd)
  SetAppOption(Cmd.interpolationType 1)
  SetAppOption(Cmd.interpolationType.interpolationType 'nn')
  Run( output ${Cmd} )
  Echo( ${output} )
  Set( TEMPLATEDIR ${OUTPUTDIR} )
  Set( TEMPLATE template.nrrd )
EndIf( ${COPY_INPUTS_IMAGES} == TRUE )
If( ${DONT_COPY_INPUTS_TRANS} == FALSE )
  #Copy initial transform
  if(${InitialTransform} != '' )
    GetFilename( EXT_TRANS ${InitialTransform} EXTENSION )
    CopyFile( ${InitialTransform} ${OUTPUTDIR}/InitialTransform${EXT_TRANS} )
    set(InitialTransform  ${OUTPUTDIR}/InitialTransform${EXT_TRANS} )
  endif(${InitialTransform} != '' )
  #Copy transform
  if(${TRANSFORMATIONFILE} != '' )
    GetFilename( EXT_TRANS ${TRANSFORMATIONFILE} EXTENSION )
    CopyFile( ${TRANSFORMATIONFILE} ${OUTPUTDIR}/Transform${EXT_TRANS} )
    set(TRANSFORMATIONFILE  ${OUTPUTDIR}/Transform${EXT_TRANS} )
    Set( TransformRelativePATH Transform${EXT_TRANS} )
  endif(${TRANSFORMATIONFILE} != '' )
EndIf( ${DONT_COPY_INPUTS_TRANS} == FALSE )


If (${COMPUTEORIENTATION} == TRUE )
  echo ('Computation of orientation transformation for '  ${INPUTTYPE} ' type')
  #Set( ComputeOrientationCmd ${ManualImageOrientPATH} ${MANUALORIENTATION} LPS ${TEMPDIR}/${ROOTNAME}_orientation.txt )
  echo('starting manual image orient') 
  SetApp(ComputeOrientationCmd @ManualImageOrient)
  SetAppOption(ComputeOrientationCmd.inputOrientation ${MANUALORIENTATION})
  SetAppOption(ComputeOrientationCmd.wantedOrientation 'LPS')
  SetAppOption(ComputeOrientationCmd.outputTransform ${TEMPDIR}/${ROOTNAME}_orientation.txt)
  echo(${ComputeOrientationCmd})

  Run (output ${ComputeOrientationCmd})
  echo(${output})
  Set( ORIG_IMAGE ${INPUT}.${EXT} )
  Set( ORIENTED_IMAGE ${ROOTNAME}_oriented.nrrd )
  Set( GRIDorient ${TEMPDIR}/${ROOTNAME}_orientation_grid.nrrd )
  
  If( ${INPUTTYPE} == 'DWI' )
      Set( DWImage ${ORIENTED_IMAGE} )
     # Set( CmdTool ${ResampleVolume2PATH} )
      SetApp(Cmd @ResampleVolume2)
      SetAppOption(Cmd.inputVolume ${INPUTDIR}/${ORIG_IMAGE})
      SetAppOption(Cmd.outputVolume ${OUTPUTDIR}/${ORIENTED_IMAGE})
      SetAppOption(Cmd.transformationFile 1)
      SetAppOption(Cmd.transformationFile.transformationFile ${TEMPDIR}/${ROOTNAME}_orientation.txt)
      SetAppOption(Cmd.referenceVolume 1)
      SetAppOption(Cmd.referenceVolume.referenceVolume ${GRIDorient})
  EndIf( ${INPUTTYPE} == 'DWI' )
  If( ${INPUTTYPE} == 'scalar' )
      Set( B0 ${ORIENTED_IMAGE} )
      Set( B0_EXT nrrd )
      SetApp(Cmd @ResampleVolume2)
      SetAppOption(Cmd.inputVolume ${INPUTDIR}/${ORIG_IMAGE})
      SetAppOption(Cmd.outputVolume ${OUTPUTDIR}/${ORIENTED_IMAGE})
      SetAppOption(Cmd.transformationFile 1)
      SetAppOption(Cmd.transformationFile.transformationFile ${TEMPDIR}/${ROOTNAME}_orientation.txt)
      SetAppOption(Cmd.referenceVolume 1)
      SetAppOption(Cmd.referenceVolume.referenceVolume ${GRIDorient})
  EndIf( ${INPUTTYPE} == 'DWI' )
  If( ${INPUTTYPE} == 'DTI' )
      Set( DTImage ${ORIENTED_IMAGE} )
#      Set( CmdTool ${ResampleDTIPATH} )
      SetApp(Cmd @ResampleDTIlogEuclidean)
      SetAppOption(Cmd.input ${INPUTDIR}/${ORIG_IMAGE})
      SetAppOption(Cmd.output ${OUTPUTDIR}/${ORIENTED_IMAGE})
      SetAppOption(Cmd.transformationFile 1)
      SetAppOption(Cmd.transformationFile.transformationFile ${TEMPDIR}/${ROOTNAME}_orientation.txt)
      SetAppOption(Cmd.reference 1)
      SetAppOption(Cmd.reference.reference ${GRIDorient})
  EndIf( ${INPUTTYPE} == 'DTI' )



  Set( GRIDorient ${TEMPDIR}/${ROOTNAME}_orientation_grid.nrrd )
  #Set( GridCmd ${ITKTransformToolsPATH} size ${INPUTDIR}/${ORIG_IMAGE} ${TEMPDIR}/${ROOTNAME}_orientation.txt --grid ${GRIDorient} )
  SetApp(GridCmd @ITKTransformTools)
  SetAppOption(GridCmd.size 1)
  SetAppOption(GridCmd.size.sizeInputImage ${INPUTDIR}/${ORIG_IMAGE})
  SetAppOption(GridCmd.size 1)
  SetAppOption(GridCmd.size.sizeInitTransform ${TEMPDIR}/${ROOTNAME}_orientation.txt)
  SetAppOption(GridCmd.grid 1)
  SetAppOption(GridCmd.grid.sizeGridFile ${GRIDorient})
  echo('will use grid cmd')
  Run( output ${GridCmd} )
  Echo( ${output} )
  #Set( Cmd ${CmdTool} ${INPUTDIR}/${ORIG_IMAGE} ${OUTPUTDIR}/${ORIENTED_IMAGE} -f ${TEMPDIR}/${ROOTNAME}_orientation.txt -R ${GRIDorient} )
  echo('super commandline')
  Run( output ${Cmd} )
  Echo( ${output} )
  Set( EXT nrrd )
#  GetFilename( INPUT ${ORIENTED_IMAGE} NAME_WITHOUT_EXTENSION )
  RegEx( INPUT ${ORIENTED_IMAGE} '\.nrrd' REPLACE '' )
  GetFilename( INPUT ${INPUT} NAME )
  Set( INPUTDIR ${OUTPUTDIR} )
  Set( DTI_DIR ${OUTPUTDIR} )
EndIf (${COMPUTEORIENTATION})

If( ${INPUTTYPE} == 'DWI' )
  echo('input is DWI type')
  If( ${CREATEB0} == FALSE && ${CREATEIDWI} == FALSE )
    Set( BiasCorrection FALSE )
  EndIf( ${CREATEB0} == FALSE && ${CREATEIDWI} == FALSE )
  If( ${BiasCorrection} == TRUE || ${SKULLSTRIP} == TRUE )
    Set( CREATEB0 TRUE )
  EndIf( ${BiasCorrection} == TRUE || ${SKULLSTRIP} == TRUE )
  #We always create the B0 image, in the temp directory. It is used to compute the bias field correction and the mask
  Set( B0Flag "" )
  Set( IDWIFlag "" )
  echo ('Creation of the DTI' )
  Set( MASK ${ROOTNAME}_mask_from_dti_estimation.nrrd )
  Set( BASELINE ${ROOTNAME}_baseline.nrrd )
  #Set (GenerateDTICmd ${DiffusionTensorEstimationPATH} ${INPUTDIR}/${DWImage} --removeislands -o 0 -e WLS --shiftNeg ${OUTPUTDIR}/${DTImage} ${TEMPDIR}/${BASELINE} ${TEMPDIR}/${MASK} )
  SetApp(GenerateDTICmd @DiffusionTensorEstimation)
  SetAppOption(GenerateDTICmd.inputDWIvolume ${INPUTDIR}/${DWImage})
  SetAppOption(GridCmd.removeislands 1)
  SetAppOption(GridCmd.otsuomegathreshold 1)
  SetAppOption(GridCmd.otsuomegathreshold.otsuomegathreshold 0)
  SetAppOption(GridCmd.enumeration 1)
  SetAppOption(GridCmd.enumeration.enumeration WLS)
  SetAppOption(GridCmd.shiftNeg 1)
  SetAppOption(GenerateDTICmd.estimatedDTIvolume ${OUTPUTDIR}/${DTImage})
  SetAppOption(GenerateDTICmd.estimatedBaselinevolume ${TEMPDIR}/${BASELINE})
  SetAppOption(GenerateDTICmd.OtsuThresholdMask ${TEMPDIR}/${MASK})
  Run (output ${GenerateDTICmd})
  Echo (${output})
  If (${CREATEB0} == TRUE ) 
    #Set( B0Flag --B0 ${TEMPDIR}/${B0} )
    SetApp(GenerateCmd @dtiestim)
    SetAppOption(GenerateCmd.dwi_image 1)
    SetAppOption(GenerateCmd.dwi_image.dwi_image ${INPUTDIR}/${DWImage})
    SetAppOption(GenerateCmd.tensor_output 1)
    SetAppOption(GenerateCmd.tensor_output.tensor_output ${TEMPDIR}/${DTImage})
    SetAppOption(GenerateCmd.B0 1)
    SetAppOption(GenerateCmd.B0.B0 ${TEMPDIR}/${B0})
  EndIf (${CREATEB0})
  If (${CREATEIDWI} == TRUE ) 
    #Set (IDWIFlag --idwi ${TEMPDIR}/${IDWImage} )
    SetApp(GenerateCmd @dtiestim)
    SetAppOption(GenerateCmd.dwi_image 1)
    SetAppOption(GenerateCmd.dwi_image.dwi_image ${INPUTDIR}/${DWImage})
    SetAppOption(GenerateCmd.tensor_output 1)
    SetAppOption(GenerateCmd.tensor_output.tensor_output ${TEMPDIR}/${DTImage})
    SetAppOption(GenerateCmd.idwi 1)
    SetAppOption(GenerateCmd.idwi.idwi ${TEMPDIR}/${IDWImage})
  EndIf (${CREATEIDWI})
  If (${CREATEB0} == TRUE || ${CREATEIDWI} == TRUE )
    echo ('Creation of B0 and/or IDWI' )
   # Set (GenerateCmd ${dtiestimPATH} --dwi_image ${INPUTDIR}/${DWImage} --tensor_output ${TEMPDIR}/${DTImage} ${B0Flag} ${IDWIFlag} )
    Run (output ${GenerateCmd})
    Echo (${output})    
  Endif (${CREATEB0} == TRUE || ${CREATEIDWI} == TRUE )
EndIf( ${INPUTTYPE} == 'DWI' )

If( ${BiasCorrection} == TRUE && N4PATH )
  echo('going to r5')
  include( r5.pipeline.bms )
  echo('back to r4')
EndIf( ${BiasCorrection} == TRUE && N4PATH )

If(${InitialTransform} != '' )
  echo('initial transform not void loop')
  Set( Grid ${TEMPDIR}/initialGrid.nrrd )
  #Set( GridCmd ${ITKTransformToolsPATH} size ${INPUTDIR}/${INPUT}.${EXT} ${InitialTransform} --grid ${Grid} )
  SetApp(GridCmd @ITKTransformTools)
  SetAppOption(GridCmd.size 1)
  SetAppOption(GridCmd.size.sizeInputImage ${INPUTDIR}/${INPUT}.${EXT})
  SetAppOption(GridCmd.size.sizeInitTransform ${InitialTransform})
  SetAppOption(GridCmd.grid 1)
  SetAppOption(GridCmd.grid.sizeGridFile ${Grid})
  Run( output ${GridCmd} )
  echo( ${output} )
  #Set( GridCmdIso ${ITKTransformToolsPATH} iso ${Grid} --grid ${Grid} )
  SetApp(GridCmdIso @ITKTransformTools)
  SetAppOption(GridCmdIso.iso 1)
  SetAppOption(GridCmdIso.iso.iso ${Grid})
  SetAppOption(GridCmdIso.grid 1)
  SetAppOption(GridCmdIso.grid.sizeGridFile ${Grid})
  Run( output ${GridCmdIso} )
  echo( ${output} )
Endif(${InitialTransform} != '' )

If( ${SCALE} == TRUE )
   echo('scale true loop')
  Set( Grid ${OUTPUTDIR}/ImageGrid.nrrd )
  If(${InitialTransform} == '' )
  #  Set( Cmd ${ITKTransformToolsPATH} iso ${INPUTDIR}/${INPUT}.${EXT} --grid ${Grid} )
    SetApp(Cmd @ITKTransformTools)
    SetAppOption(Cmd.iso 1)
    SetAppOption(Cmd.iso.iso ${Grid})
    SetAppOption(Cmd.grid 1)
    SetAppOption(Cmd.grid.sizeGridFile ${Grid})
    Run( output ${Cmd} )
    echo( ${output} )
  Endif(${InitialTransform} == '' )

  Set( ATLAS_ISO_SCALED ${OUTPUTDIR}/template_iso_scale.nrrd )
  Set( TemplateGrid ${TEMPDIR}/template_iso_scale_grid.nrrd )
  #Set( Cmd ${ITKTransformToolsPATH} iso ${TEMPLATEDIR}/${TEMPLATE} --grid ${TemplateGrid} )
  SetApp(Cmd @ITKTransformTools)
  SetAppOption(Cmd.iso 1)
  SetAppOption(Cmd.iso.iso ${TEMPLATEDIR}/${TEMPLATE})
  SetAppOption(Cmd.grid 1)
  SetAppOption(Cmd.grid.sizeGridFile ${TemplateGrid})
  Run( output ${Cmd} )
  echo( ${output} )
  #Set( ResampleCmd ${ResampleVolume2PATH} ${TEMPLATEDIR}/${TEMPLATE} ${ATLAS_ISO_SCALED} -R ${TemplateGrid} )
  SetApp(ResampleCmd @ResampleVolume2)
  SetAppOption(ResampleCmd.inputVolume ${TEMPLATEDIR}/${TEMPLATE})
  SetAppOption(ResampleCmd.outputVolume ${ATLAS_ISO_SCALED})
  SetAppOption(ResampleCmd.referenceVolume 1)
  SetAppOption(ResampleCmd.referenceVolume.referenceVolume ${TemplateGrid})
  Run( output ${ResampleCmd} )
  echo( ${output} )
  #Set( ImageMathCmd ${ImageMathPATH} ${ATLAS_ISO_SCALED} -changeSp 1,1,1 -outfile ${ATLAS_ISO_SCALED} -type float )
  SetApp(ImageMathCmd @ImageMath)
  SetAppOption(ImageMathCmd.infile ${ATLAS_ISO_SCALED})
  SetAppOption(ImageMathCmd.outputVolume ${ATLAS_ISO_SCALED})
  SetAppOption(ImageMathCmd.changeSp 1)
  SetAppOption(ImageMathCmd.changeSp.changeSp 1,1,1)
  SetAppOption(ImageMathCmd.outfile 1)
  SetAppOption(ImageMathCmd.outfile.outputfile ${ATLAS_ISO_SCALED})
  SetAppOption(ImageMathCmd.type 1)
  SetAppOption(ImageMathCmd.type.giveType float)
  Run( output ${ImageMathCmd} )
  echo( ${output} )
EndIf( ${SCALE} == TRUE )
