Int(${step})
#########################################################
include(r.config.bms)

set(BIAS ${bias})
set(SCALE ${scaled})
Set(SKULLSTRIP ${skullstrip})
Set(GRIDorient ${orientation})
set(INPUTTYPE ${inputType})
set(CASES ${cases})
set(dir ${cfg_output_directory})
set(OUTPUT_PRE_SUBDIR Registration)
set(PROCESS_SUBDIR '')
set(tempDir ${dir}/${OUTPUT_PRE_SUBDIR}/temp)
set(OUTPUTDIR ${dir}/${OUTPUT_PRE_SUBDIR})
MakeDirectory( ${tempDir} )

Set( CREATEB0 FALSE )
Set( CREATEIDWI FALSE )
Set( COMPUTEFA FALSE )
Set( COMPUTEMD FALSE )
Set( COMPUTECOLORFA FALSE )
Set( COMPUTERD FALSE )
Set( COMPUTEAD FALSE )
Set( skullStrip FALSE )
Set( computeOrientation FALSE )
Set( manualOrientation '' )
Set (biasCorrection FALSE)
Set(im1 '')
Set(im2 '')
Set(im3 '')
Set(initialTransform '')

If( ${Type} == 'scalar' )
  Set( INPUTTYPE scalar )
EndIf( ${Type} == 'scalar' )
If( ${Type} == 'DTI' )
  Set( INPUTTYPE DTI )
  Set( COMPUTEFA TRUE )
  Set( COMPUTEMD TRUE )
  Set( COMPUTECOLORFA TRUE )
  Set( COMPUTERD TRUE )
  Set( COMPUTEAD TRUE )
EndIf( ${Type} == 'DTI' )
If( ${Type} == 'DWI' )
  Set( INPUTTYPE DWI )
  Set( CREATEB0 TRUE )
  Set( CREATEIDWI TRUE )
  Set( COMPUTEFA TRUE )
  Set( COMPUTEMD TRUE )
  Set( COMPUTECOLORFA TRUE )
  Set( COMPUTERD TRUE )
  Set( COMPUTEAD TRUE )
EndIf( ${Type} == 'DWI' )
GetFilename(TEMPLATE_DIR ${templatefile} PATH)
GetFilename(TEMPLATE_FILE ${templatefile} NAME)
Set( template ${TEMPLATE_DIR}/${TEMPLATE_FILE} )
If( ${orientation} != '' )
  Set (COMPUTEORIENTATION TRUE)
  Set (MANUALORIENTATION ${orientation})
EndIf( ${orientation} != '' )

set (iteration1 0)
ForEach( i ${CASES} )
  echo('iteration = ' ${iteration1})
  set (OutSubjDir ${dir}/${OUTPUT_PRE_SUBDIR}/${i})
#  set (InSubjDir ${dir}/${INPUT_PRE_SUBDIR}/${i}/${INPUT_POST_SUBDIR} )
  MakeDirectory( ${OutSubjDir}/${PROCESS_SUBDIR} )
  Set( rootName ${i} )
#### added 
 # GetParam (OneCase ${casesInputs} ${iteration1})
  GetParam(OneCase ${casesInputs} ${iteration1})
  GetFilename (InSubjDir ${OneCase} PATH)
  GetFilename (OneCaseNoPath ${OneCase} NAME)
  RegEx (INPUT_SUFFIX ${OneCaseNoPath} ${i} REPLACE '')

  GetParam(OneTransform ${casesTransforms} ${iteration1})
  If(${OneTransform} != '')
    GetFilename (OneTransformNoPath ${OneTransform} NAME)
    RegEx (TRANSFORM_SUFFIX ${OneTransformNoPath} ${i} REPLACE '')
  Else(${OneTransform} != '')
    Set(TRANSFORM_SUFFIX '')
  EndIf(${OneTransform} != '')

  GetParam(OneAdditionalImage ${casesAdditionalImages} ${iteration1})
  If(${OneAdditionalImage} != '')
    GetFilename (OneAddImageNoPath ${OneAdditionalImage} NAME)
    RegEx (ADDITIONAL_IMAGES_SUFFIX ${OneAddImageNoPath} ${i} REPLACE '')
  Else(${OneAdditionalImage} != '')
    Set(ADDITIONAL_IMAGES_SUFFIX '')
  EndIf(${OneAdditionalImage} != '')

  GetParam(OneAdditionalImageNN ${casesAdditionalImagesNN} ${iteration1})
  If(${OneAdditionalImageNN} != '')
    GetFilename (OneAddImageNNNoPath ${OneAdditionalImageNN} NAME)
    RegEx (ADDITIONAL_IMAGES_NN_SUFFIX ${OneAddImageNNNoPath} ${i} REPLACE '')
  Else(${OneAdditionalImageNN} != '')
    Set(${ADDITIONAL_IMAGES_NN_SUFFIX '')
  EndIf(${OneAdditionalImageNN} != '')

  GetParam(OneInitialTransform ${casesInitialTransforms} ${iteration1})
  If(${OneInitialTransform} != '')
    GetFilename (OneInitialTransformNoPath ${OneInitialTransform} NAME)
    RegEx (INITIAL_TRANS_SUFFIX ${OneInitialTransformNoPath} ${i} REPLACE '')
  Else(${OneInitialTransform} != '')
    Set(${INITIAL_TRANS_SUFFIX} '')
  EndIf(${OneInitialTransform} != '')

  echo('insubjdir = ' ${InSubjDir} ' input suffix ' ${INPUT_SUFFIX} ' transform suffix ' ${TRANSFORM_SUFFIX} ' additional images suffix ' ${ADDITIONAL_IMAGES_SUFFIX} ' additional images nn suffix ' ${ADDITIONAL_IMAGES_NN_SUFFIX} ' initial transform ' ${INITIAL_TRANS_SUFFIX} )
  echo()
#### /added
  Set( inputImage ${InSubjDir}/${i}${INPUT_SUFFIX} )
  GetFilename (INPUT ${InSubjDir}/${i}${INPUT_SUFFIX} NAME_WITHOUT_EXTENSION)
  GetFilename (pointExt ${i}${INPUT_SUFFIX} EXTENSION)
  RegEx(EXT ${pointExt} '\.' REPLACE '')
  echo()
  echo(#########################################)
  echo(EXT = ${EXT} et pointExt = ${pointExt})
  echo(#########################################)
  echo() 
  Set( outputDirectory ${OutSubjDir}/${PROCESS_SUBDIR} )
  If( ${TRANSFORM_SUFFIX} != '' )
    Set( TRANSFORMATIONFILE ${InSubjDir}/${i}${TRANSFORM_SUFFIX} )
  Else( ${TRANSFORM_SUFFIX} != '' )
   Set( TRANSFORMATIONFILE '')
  EndIf( ${TRANSFORM_SUFFIX} != '' )
  If( ${ADDITIONAL_IMAGES_SUFFIX} != '' )
    If( GetListSize( ${ADDITIONAL_IMAGES_SUFFIX} ) > 3 )
      Echo( "Give max 3 additional images" )
      Exit()
    EndIf( GetListSize( ${ADDITIONAL_IMAGES_SUFFIX} ) > 3 )
    set( count 1 )
    ForEach( j ${ADDITIONAL_IMAGES_SUFFIX} )
      Set(im${count} ${InSubjDir}/${i}$j)
      Inc( ${count} 1 )
      Int( ${count} )
    EndForEach( j ${ADDITIONAL_IMAGES_SUFFIX} )
  EndIf( ${ADDITIONAL_IMAGES_SUFFIX} != '' )
  If( ${ADDITIONAL_IMAGES_NN_SUFFIX} != '' )
    If( GetListSize( ${ADDITIONAL_IMAGES_NN_SUFFIX} ) > 2 )
      Echo( "Give max 2 additional images (NN)" )
      Exit()
    EndIf( GetListSize( ${ADDITIONAL_IMAGES_NN_SUFFIX} ) > 2 )
    set( count 1 )
    ForEach( j ${ADDITIONAL_IMAGES_NN_SUFFIX} )
      Set(imNN${count} ${InSubjDir}/${i}$j)
      Inc( ${count} 1 )
      Int( ${count} )
    EndForEach( j ${ADDITIONAL_IMAGES_NN_SUFFIX} )
  EndIf( ${ADDITIONAL_IMAGES_NN_SUFFIX} != '' )
  If( ${INITIAL_TRANS_SUFFIX} != '' )
    Set(InitialTransform ${InSubjDir}/${i}${INITIAL_TRANS_SUFFIX} )
  Else( ${INITIAL_TRANS_SUFFIX} != '' )
    Set(InitialTransform '')
  EndIf( ${INITIAL_TRANS_SUFFIX} != '' )
  echo('going to r2')
  include(r2.pipeline.bms)
  echo('back to r1')
  Inc(${iteration1} 1)
 echo()
 echo(####################################)
 echo(DONE WITH CASE ${i} )
 echo(####################################)
 echo()
EndForEach( i ${CASES} )
