### The script uses:
#- ImageMath
#- ResampleVolume2
###############################
#prepare files before computation
#rreg and areg need .gipl.gz files so we convert everything that
#these softare are going to use to this format

#convert
if( ${Registration} == TRUE )
  Set( Img ${InputSubjDir}/${Case}${RIGID_REGISTRATION_IMAGE_SUFFIX} )
  Set( DestImg ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}_noDirection.gipl.gz )

  if( ${IS_SCALAR} == FALSE )
    echo( "DTI image" )
    if( ${RIGID_IS_MD} == TRUE )
      echo( "MD image" )
      set( Cmd ${ImageMath} ${Img} -constOper 2,100000 -outfile ${DestImg} )
      SetApp(Cmd @ImageMath)
      SetAppOption(Cmd.infile ${Img})
      SetAppOption(Cmd.outfile 1)
      SetAppOption(Cmd.outfile.outputfile ${DestImg})
      SetAppOption(Cmd.constOper 1)
      SetAppOption(Cmd.constOper.constOper '2,100000')
    else( ${RIGID_IS_MD} == TRUE )
      if( ${RIGID_IS_FA} == TRUE )
         echo( "FA image" )
         set( Cmd ${ImageMath} ${Img} -constOper 2,10000 -outfile ${DestImg} )
      SetApp(Cmd @ImageMath)
      SetAppOption(Cmd.infile ${Img})
      SetAppOption(Cmd.outfile 1)
      SetAppOption(Cmd.outfile.outputfile ${DestImg})
      SetAppOption(Cmd.constOper 1)
      SetAppOption(Cmd.constOper.constOper '2,100000')
      else( ${RIGID_IS_FA} == TRUE )
         Set( Cmd ${ResampleVolume2} ${Img} ${DestImg} -i nn )
      SetApp(Cmd @ResampleVolume2)
      SetAppOption(Cmd.inputVolume ${Img})
      SetAppOption(Cmd.outputVolume ${DestImg})
      SetAppOption(Cmd.interpolationType 1)
      SetAppOption(Cmd.interpolationType.interpolationType 'nn')
      EndIf( ${RIGID_IS_FA} == TRUE )
    EndIf( ${RIGID_IS_MD} == TRUE )
  else( ${IS_SCALAR} == FALSE )
    echo( "Scalar image" )
    Set( Cmd ${ResampleVolume2} ${Img} ${DestImg} -i nn )
      SetApp(transformCmd @ResampleVolume2)
      SetAppOption(transformCmd.inputVolume ${Img})
      SetAppOption(transformCmd.outputVolume ${DestImg})
      SetAppOption(transformCmd.interpolationType 1)
      SetAppOption(transformCmd.interpolationType.interpolationType 'nn')
  endif( ${IS_SCALAR} == FALSE )
  If( ${step} < 2 )
    Run (output ${Cmd})
    Echo (${output})
  EndIf( ${step} < 2 )

  Set( Direction ${tempDir}/${Case}/${Case}_direction.tfm )
  Set( Cmd ${ITKTransformTools} direction ${Img} ${Direction} )
      SetApp(Cmd @ITKTransformTools)
      SetAppOption(Cmd.direction 1)
      SetAppOption(Cmd.direction.input ${Img})
      SetAppOption(Cmd.direction.output ${Direction})
  If( ${step} < 3 )
    Run( output ${Cmd} )
    echo( ${output} )
  EndIf( ${step} < 3 )

  Set( directionGrid ${tempDir}/${Case}/${Case}_directionGrid.nrrd )
  Set( Cmd ${ITKTransformTools} size ${DestImg} ${Direction} --grid ${directionGrid} )
      SetApp(Cmd @ITKTransformTools)
      SetAppOption(Cmd.size 1)
      SetAppOption(Cmd.size.sizeInputImage ${DestImg})
      SetAppOption(Cmd.size.sizeInitTransformImage ${Direction})
      SetAppOption(Cmd.grid 1)
      SetAppOption(Cmd.grid.sizeGridFile ${directionGrid})
  If( ${step} < 4 )
    Run( output ${Cmd} )
    echo( ${output} )
  EndIf( ${step} < 4 )

  Set( directionIMG ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}.gipl.gz )
  Set( Cmd ${ResampleVolume2} ${DestImg} -f ${Direction} -R ${directionGrid} -d 1,0,0,0,1,0,0,0,1 ${directionIMG} )
      SetApp(Cmd @ResampleVolume2)
      SetAppOption(Cmd.inputVolume ${DestImg})
      SetAppOption(Cmd.transformationFile 1)
      SetAppOption(Cmd.transformationFile.transformationFile ${Direction})
      SetAppOption(Cmd.referenceVolume 1)
      SetAppOption(Cmd.referenceVolume.referenceVolume ${directionGrid})
      SetAppOption(Cmd.directionMatrix 1)
      SetAppOption(Cmd.directionMatrix.directionMatrix '1,0,0,0,1,0,0,0,1')
      SetAppOption(Cmd.outputVolume ${directionIMG})
  If( ${step} < 5 )
    Run( output ${Cmd} )
    echo( ${output} )
  EndIf( ${step} < 5 )
EndIf( ${Registration} == TRUE )




set( count 0 )
If( ${IS_SCALED} == TRUE )
  ForEach( file ${ATLAS_TAG} )
    GetParam(EXT ${ATLAS_EXT} ${count})
    Set( SrcImg ${ATLAS_DIR}/${file}${EXT} )
    if( ${Registration} == TRUE )
      Set( DstImg ${tempDir}/${Case}/${file}.gipl.gz )
    else( ${Registration} == TRUE )
      Set( DstImg ${tempDir}/${Case}/${file}.mha )
    endif( ${Registration} == TRUE )
    Set (transformCmd ${ResampleVolume2} ${SrcImg} ${DstImg} -R ${InputSubjDir}/${ATLAS_GRID} )
      SetApp(transformCmd @ResampleVolume2)
      SetAppOption(transformCmd.inputVolume ${SrcImg})
      SetAppOption(transformCmd.referenceVolume 1)
      SetAppOption(transformCmd.referenceVolume.referenceVolume ${InputSubjDir}/${ATLAS_GRID})
      SetAppOption(transformCmd.outputVolume ${DstImg})
    echo(${transformCmd})
    Run (output ${transformCmd})
    Echo (${output})
    Set( ImageMathCmd ${ImageMath} ${DstImg} -changeSp 1,1,1 -outfile ${DstImg} -type float )
      SetApp(ImageMathCmd @ImageMath)
      SetAppOption(ImageMathCmd.infile ${DstImg})
      SetAppOption(ImageMathCmd.changeSp 1)
      SetAppOption(ImageMathCmd.changeSp.changeSp '1,1,1')
      SetAppOption(ImageMathCmd.outfile 1)
      SetAppOption(ImageMathCmd.outfile.outputfile ${DstImg})
      SetAppOption(ImageMathCmd.type 1)
      SetAppOption(ImageMathCmd.type.giveType 'float')
    echo( ${ImageMathCmd} )
    Run( output ${ImageMathCmd} )
    echo( ${output} )
    Inc( ${count} 1 )
    Int( ${count} )
  EndForEach( file ${ATLAS_TAG} )
EndIf( ${IS_SCALED} )
