echo ('Resampling')
if(${InitialTransform} != '' && ${SCALE} != TRUE)
  Set( COMBINEDTransform ${ROOTNAME}_reg_combined.mat )
#  Set( Cmd ${ITKTransformToolsPATH} combine ${InitialTransform} ${TRANSFORMFILE} -o ${OUTPUTDIR}/${COMBINEDTransform} )
  SetApp(Cmd @ITKTransformTools)
  SetAppOption(Cmd.combine 1)
  SetAppOption(Cmd.combine.combineInitTransform ${InitialTransform})
  SetAppOption(Cmd.combine.combineRigidTransforn ${TRANSFORMFILE})
  SetAppOption(Cmd.combineOutput 1)
  SetAppOption(Cmd.combineOutput.combineOutput ${OUTPUTDIR}/${COMBINEDTransform})
  CondorPostScript(Cmd ${cfg_exe} ${cfg_condorpostscript} ${cfg_output_directory} ${COPIED_HFIELD} ${OneCase_outputFolderIds})
  Run( output ${Cmd} )
  echo( ${output} )



  Set( TRANSFORMATIONFILE ${COMBINEDTransform} )
  Set( TRANSFORMFILE ${OUTPUTDIR}/${TRANSFORMATIONFILE} )
  Set( TransformRelativePATH ${TRANSFORMATIONFILE} )
EndIf(${InitialTransform} != '' && ${SCALE} != TRUE )


If( ${SCALE} == TRUE )
   Set( MOVING_IMAGE_ISO ${TEMPDIR}/${ROOTNAME}_iso_scaled.nrrd )
   if(${InitialTransform} != '' )
     Set( INITIAL_TRANSFORMED_IMAGE ${TEMPDIR}/${ROOTNAME}_initial_transform.nrrd )
     #Set ( Cmd ${Module} -R ${Grid} ${MOVING_IMAGE} ${INITIAL_TRANSFORMED_IMAGE} -f ${InitialTransform} )
     
     If( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
     #Set( Module ${ResampleDTIPATH} )  
     Set( MOVING_IMAGE ${DTI_DIR}/${DTImage} )
     SetApp(Cmd @ResampleDTIlogEuclidean)
     SetAppOption(Cmd.input ${MOVING_IMAGE})
     SetAppOption(Cmd.output ${INITIAL_TRANSFORMED_IMAGE})
     SetAppOption(Cmd.reference 1)
     SetAppOption(Cmd.reference.reference ${Grid})
     SetAppOption(Cmd.transformationFile 1)
     SetAppOption(Cmd.transformationFile.transformationFile ${InitialTransform})
     Else( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
     echo ('Transform image')
     #Set( Module ${ResampleVolume2PATH})
     Set( MOVING_IMAGE ${INPUTDIR}/${B0} )
     SetApp(Cmd @ResampleVolume2)
     SetAppOption(Cmd.inputVolume ${MOVING_IMAGE})
     SetAppOption(Cmd.outputVolume ${INITIAL_TRANSFORMED_IMAGE})
     SetAppOption(Cmd.referenceVolume 1)
     SetAppOption(Cmd.referenceVolume.referenceVolume ${Grid})
     SetAppOption(Cmd.transformationFile 1)
     SetAppOption(Cmd.transformationFile.transformationFile ${InitialTransform})
     EndIf( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
     Run ( output ${Cmd} )
     echo( ${output} )
     Set( MOVING_IMAGE_ISO ${INITIAL_TRANSFORMED_IMAGE} )
   else(${InitialTransform} != '' )
     If( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
       #Set( Module ${ResampleDTIPATH} )  
       Set( MOVING_IMAGE ${DTI_DIR}/${DTImage} )
       SetApp(Cmd @ResampleDTIlogEuclidean)
       SetAppOption(Cmd.input ${MOVING_IMAGE})
       SetAppOption(Cmd.output ${MOVING_IMAGE_ISO})
       SetAppOption(Cmd.reference 1)
       SetAppOption(Cmd.reference.reference ${Grid})
     Else( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
       echo ('Transform image')
       #Set( Module ${ResampleVolume2PATH})
       Set(MOVING_IMAGE ${INPUTDIR}/${B0} )
       #Set ( Cmd ${Module} -R ${Grid} ${MOVING_IMAGE} ${MOVING_IMAGE_ISO} )
       SetApp(Cmd @ResampleVolume2)
       SetAppOption(Cmd.inputVolume ${MOVING_IMAGE})
       SetAppOption(Cmd.outputVolume ${MOVING_IMAGE_ISO})
       SetAppOption(Cmd.referenceVolume 1)
       SetAppOption(Cmd.referenceVolume.referenceVolume ${Grid})
     EndIf( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
     Run ( output ${Cmd} )
     echo( ${output} )
   endif(${InitialTransform} != '' )
   #Set( Cmd ${ImageMathPATH} ${MOVING_IMAGE_ISO} -changeSp 1,1,1 -outfile ${MOVING_IMAGE_ISO} -type float )
   SetApp(Cmd @ImageMath)
   SetAppOption(Cmd.infile ${MOVING_IMAGE_ISO})
   SetAppOption(Cmd.changeSp 1)
   SetAppOption(Cmd.changeSp.changeSp '1,1,1')
   SetAppOption(Cmd.outfile 1)
   SetAppOption(Cmd.outfile.outputfile ${MOVING_IMAGE_ISO})
   SetAppOption(Cmd.type 1)
   SetAppOption(Cmd.type.giveType 'float')
   Run ( output ${Cmd} )
   echo( ${output} )
   Set( ReferenceImage ${ATLAS_ISO_SCALED} )
   Set( MOVING_IMAGE ${MOVING_IMAGE_ISO} )
Else( ${SCALE} == TRUE )
   Set( ReferenceImage ${TEMPDIR}/Resampling_grid.nrrd )
#   Set( GridCmd ${ITKTransformToolsPATH} scale ${MOVING_IMAGE} ${TEMPLATEDIR}/${TEMPLATE} ${TEMPDIR}/${ROOTNAME}_iso_grid.nrrd ${ReferenceImage} )

   #Set( GridCmd ${ITKTransformToolsPATH} spacing ${TEMPLATEDIR}/${TEMPLATE} ${MOVING_IMAGE} ${ReferenceImage} )
   SetApp(GridCmd @ITKTransformTools)
   SetAppOption(GridCmd.spacing 1)
   SetAppOption(GridCmd.spacing.spacingInputImage ${TEMPLATEDIR}/${TEMPLATE})
   SetAppOption(GridCmd.spacing.spacingOutputImage ${MOVING_IMAGE})
   SetAppOption(GridCmd.spacing.spacingReferenceImage ${ReferenceImage})
   Run ( output ${GridCmd} )
   echo( ${output} )
EndIf( ${SCALE} == TRUE )
#Set ( Cmd ${Module} -R ${ReferenceImage} -f ${TRANSFORMFILE} ${MOVING_IMAGE} ${OUTPUTDIR}/${RESAMPLED_IMAGE} -i ${INTERPOLATION} )
If( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
       SetApp(Cmd @ResampleDTIlogEuclidean)
       SetAppOption(Cmd.input ${MOVING_IMAGE})
       SetAppOption(Cmd.output ${OUTPUTDIR}/${RESAMPLED_IMAGE})
       SetAppOption(Cmd.reference 1)
       SetAppOption(Cmd.reference.reference ${ReferenceImage})
       SetAppOption(Cmd.transformationFile 1)
       SetAppOption(Cmd.transformationFile.transformationFile ${TRANSFORMFILE})
       SetAppOption(Cmd.interpolation 1)
       SetAppOption(Cmd.interpolation.interpolation ${INTERPOLATION})
Else( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
       SetApp(Cmd @ResampleVolume2)
       SetAppOption(Cmd.inputVolume ${MOVING_IMAGE})
       SetAppOption(Cmd.outputVolume ${OUTPUTDIR}/${RESAMPLED_IMAGE})
       SetAppOption(Cmd.referenceVolume 1)
       SetAppOption(Cmd.referenceVolume.referenceVolume ${ReferenceImage})
       SetAppOption(Cmd.transformationFile 1)
       SetAppOption(Cmd.transformationFile.transformationFile ${TRANSFORMFILE})
       SetAppOption(Cmd.interpolationType 1)
       SetAppOption(Cmd.interpolationType.interpolationType ${INTERPOLATION})
EndIf( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
CondorPostScript(Cmd ${cfg_exe} ${cfg_condorpostscript} ${cfg_output_directory} ${OUTPUTDIR}/${RESAMPLED_IMAGE}  ${OneCase_outputFolderIds})
Run ( output ${Cmd} )
echo( ${output} )


If( ${INPUTTYPE} == 'DWI' )
  If (${CREATEB0} == TRUE ) 
    RegEx( TAG ${B0} '\.'\${B0_EXT} REPLACE '' )
    Set( INPUT_LIST ${TEMPDIR}/${TAG} )
    Set( INPUT_EXT_LIST ${B0_EXT} )
    Set( INPUT_LIST_REORIENT FALSE )
    Set( INTERPOLATION_LIST ${INTERPOLATION} )
  EndIf (${CREATEB0} == TRUE )
  If (${CREATEIDWI} == TRUE )
    RegEx( TAG ${IDWImage} '\.nrrd' REPLACE '' )
    Set( INPUT_LIST ${TEMPDIR}/${TAG} ${INPUT_LIST} )
    Set( INPUT_EXT_LIST nrrd ${INPUT_EXT_LIST} )
    Set( INPUT_LIST_REORIENT FALSE ${INPUT_LIST_REORIENT} )
    Set( INTERPOLATION_LIST ${INTERPOLATION} ${INTERPOLATION_LIST} )
  EndIf (${CREATEIDWI} == TRUE )
EndIf( ${INPUTTYPE} == 'DWI' )
If( ${IM1} != '' )
    Set( INPUT_LIST ${IM1} ${INPUT_LIST} )
    Set( INPUT_EXT_LIST ${EXT_IM1} ${INPUT_EXT_LIST} )
    Set( INPUT_LIST_REORIENT TRUE ${INPUT_LIST_REORIENT} )
    Set( INTERPOLATION_LIST ${INTERPOLATION} ${INTERPOLATION_LIST} )
Endif( ${IM1} != '' )
If( ${IM2} != '' )
    Set( INPUT_LIST ${IM2} ${INPUT_LIST} )
    Set( INPUT_EXT_LIST ${EXT_IM2} ${INPUT_EXT_LIST} )
    Set( INPUT_LIST_REORIENT TRUE ${INPUT_LIST_REORIENT} )
    Set( INTERPOLATION_LIST ${INTERPOLATION} ${INTERPOLATION_LIST} )
Endif( ${IM2} != '' )
If( ${IM3} != '' )
    Set( INPUT_LIST ${IM3} ${INPUT_LIST} )
    Set( INPUT_EXT_LIST ${EXT_IM3} ${INPUT_EXT_LIST} )
    Set( INPUT_LIST_REORIENT TRUE ${INPUT_LIST_REORIENT} )
    Set( INTERPOLATION_LIST ${INTERPOLATION} ${INTERPOLATION_LIST} )
Endif( ${IM3} != '' )

If( ${IMNN1} != '' )
    Set( INPUT_LIST ${IMNN1} ${INPUT_LIST} )
    Set( INPUT_EXT_LIST ${EXT_IMNN1} ${INPUT_EXT_LIST} )
    Set( INPUT_LIST_REORIENT TRUE ${INPUT_LIST_REORIENT} )
    Set( INTERPOLATION_LIST nn ${INTERPOLATION_LIST} )
Endif( ${IMNN1} != '' )
If( ${IMNN2} != '' )
    Set( INPUT_LIST ${IMNN2} ${INPUT_LIST} )
    Set( INPUT_EXT_LIST ${EXT_IMNN2} ${INPUT_EXT_LIST} )
    Set( INPUT_LIST_REORIENT TRUE ${INPUT_LIST_REORIENT} )
    Set( INTERPOLATION_LIST nn ${INTERPOLATION_LIST} )
Endif( ${IMNN2} != '' )

if( ${SKULLSTRIP} == TRUE )
    Set( INPUT_LIST ${TEMPDIR}/${ROOTNAME}_Mask ${INPUT_LIST} )
    Set( INPUT_EXT_LIST nrrd ${INPUT_EXT_LIST} )
    Set( INPUT_LIST_REORIENT TRUE ${INPUT_LIST_REORIENT} )
    Set( INTERPOLATION_LIST nn ${INTERPOLATION_LIST} )
endif( ${SKULLSTRIP} == TRUE )


Set( count 0 )
ForEach( case ${INPUT_LIST} )
    echo ('Resampling '${case} )
    GetParam(INTERPOLATION_TYPE ${INTERPOLATION_LIST} ${count})
    GetParam(ORIENT ${INPUT_LIST_REORIENT} ${count}) 
    GetParam( CURRENT_EXT ${INPUT_EXT_LIST} ${count})
    GetFilename( case_NO_PATH ${case} NAME )
    Set( INPUT_IMAGE ${case}.${CURRENT_EXT} )
    If ( ${ORIENT} == TRUE && ${COMPUTEORIENTATION} == TRUE )
      Set( ORIENTED_IMAGE ${case_NO_PATH}_oriented.nrrd )
#      Set( Cmd ${ResampleVolume2PATH} ${INPUT_IMAGE} ${TEMPDIR}/${ORIENTED_IMAGE} -f ${TEMPDIR}/${ROOTNAME}_orientation.txt -R ${GRIDorient} )
      SetApp(Cmd @ResampleVolume2)
      SetAppOption(Cmd.inputVolume ${INPUT_IMAGE})
      SetAppOption(Cmd.outputVolume ${TEMPDIR}/${ORIENTED_IMAGE})
      SetAppOption(Cmd.transformationFile 1)
      SetAppOption(Cmd.transformationFile.transformationFile ${TEMPDIR}/${ROOTNAME}_orientation.txt)
      SetAppOption(Cmd.referenceVolume 1)
      SetAppOption(Cmd.referenceVolume.referenceVolume ${GRIDorient})

      Run( output ${Cmd} )
      Echo( ${output} )
      Set( INPUT_IMAGE ${TEMPDIR}/${ORIENTED_IMAGE} )
    EndIf ( ${ORIENT} == TRUE && ${COMPUTEORIENTATION} == TRUE )
    If( ${SCALE} == TRUE )
      Set( INPUT_ISO ${TEMPDIR}/${case_NO_PATH}_iso_scaled.nrrd )
      echo('inside scale = true loop!')
      if(${InitialTransform} != '' )
        Set( INITIAL_TRANSFORMED_IMAGE ${TEMPDIR}/${case_NO_PATH}_initial_transform.nrrd )
        #Set ( Cmd ${ResampleVolume2PATH} -R ${Grid} ${INPUT_IMAGE} ${INITIAL_TRANSFORMED_IMAGE}  -f ${InitialTransform} )
        SetApp(Cmd @ResampleVolume2)
        SetAppOption(Cmd.inputVolume ${INPUT_IMAGE})
        SetAppOption(Cmd.outputVolume ${INITIAL_TRANSFORMED_IMAGE})
        SetAppOption(Cmd.transformationFile 1)
        SetAppOption(Cmd.transformationFile.transformationFile ${InitialTransform})
        SetAppOption(Cmd.referenceVolume 1)
        SetAppOption(Cmd.referenceVolume.referenceVolume ${Grid})
        Run ( output ${Cmd} )
        echo( ${output} )
        Set( INPUT_ISO ${INITIAL_TRANSFORMED_IMAGE} )
      else(${InitialTransform} != '' )
#        Set ( Cmd ${ResampleVolume2PATH} -R ${Grid} ${INPUT_IMAGE} ${INPUT_ISO} )
        SetApp(Cmd @ResampleVolume2)
        SetAppOption(Cmd.inputVolume ${INPUT_IMAGE})
        SetAppOption(Cmd.outputVolume ${INPUT_ISO})
        SetAppOption(Cmd.referenceVolume 1)
        SetAppOption(Cmd.referenceVolume.referenceVolume ${Grid})
        Run ( output ${Cmd} )
        echo( ${output} )
      endif(${InitialTransform} != '' )
#      Set( Cmd ${ImageMathPATH} ${INPUT_ISO} -changeSp 1,1,1 -outfile ${INPUT_ISO} -type float )
      echo('out of init transform is void loop')
      SetApp(Cmd @ImageMath)
      SetAppOption(Cmd.infile ${INPUT_ISO})
      SetAppOption(Cmd.changeSp 1)
      SetAppOption(Cmd.changeSp.changeSp '1,1,1')
      SetAppOption(Cmd.outfile 1)
      SetAppOption(Cmd.outfile.outputfile ${INPUT_ISO})
      SetAppOption(Cmd.type 1)
      SetAppOption(Cmd.type.giveType float)
      Run ( output ${Cmd} )
      echo( ${output} )
      Set( case ${INPUT_ISO} )
      Set( INPUT_IMAGE ${INPUT_ISO} )
    EndIf( ${SCALE} == TRUE )
#    Set (Cmd ${ResampleVolume2PATH} ${INPUT_IMAGE} ${OUTPUTDIR}/${case_NO_PATH}_reg.nrrd -R ${ReferenceImage} -f ${TRANSFORMFILE} -i ${INTERPOLATION_TYPE})
    echo('out of scale is true loop')
    SetApp(Cmd @ResampleVolume2)
    SetAppOption(Cmd.inputVolume ${INPUT_IMAGE})
    SetAppOption(Cmd.outputVolume ${OUTPUTDIR}/${case_NO_PATH}_reg.nrrd)
    SetAppOption(Cmd.transformationFile 1)
    SetAppOption(Cmd.transformationFile.transformationFile ${TRANSFORMFILE})
    SetAppOption(Cmd.referenceVolume 1)
    SetAppOption(Cmd.referenceVolume.referenceVolume ${ReferenceImage})
    SetAppOption(Cmd.interpolationType 1)
    SetAppOption(Cmd.interpolationType.interpolationType ${INTERPOLATION_TYPE})
    CondorPostScript(Cmd ${cfg_exe} ${cfg_condorpostscript} ${cfg_output_directory} ${OUTPUTDIR}/${case_NO_PATH}_reg.nrrd  ${OneCase_outputFolderIds})
    Run (output ${Cmd})
    Echo (${output})
    Inc(${count} 1)
    Int( ${count} )
EndForEach( case ${INPUT_LIST} )
