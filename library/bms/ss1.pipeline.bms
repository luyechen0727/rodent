### The script uses:
#-ABC
#-SegPostProcessCLP
#-ImageMath
#-ResampleVolume2
####################Configure############################################
Include( ss.config.bms )
set( ABCSUFFIX seg )
# Int(${step})
####################run ABC##############################################
# apply ABC for brain skull stripping
# run ABC

set( CORRECTED '' )
set( dilatedMASK '' )
Include( ss2.pipeline.bms )
If( ${IS_SCALED} != TRUE )
  Include (ss3.pipeline.bms)
EndIf( ${IS_SCALED} != TRUE )
GetParam(SUFFIX ${ABC_IMAGE_SUFFIX} 0)
GetFilename( SUFFIX ${SUFFIX} NAME_WITHOUT_EXTENSION )
GetFilename( NEW_MASK_TAG_NO_EXT ${NEW_MASK_TAG} NAME_WITHOUT_EXTENSION )
#set( NB_LOOP ${NB_LOOP}-1 )



ForEach (caseInd ${caseInds})
  GetParam(Case ${cases} ${caseInd})
  GetParam(CaseInput ${caseInputs} ${caseInd})
  GetParam(CaseFolderId ${caseFolderIds} ${caseInd})

  echo('Skullstripping '${Case} )
  MakeDirectory( ${tempDir}/${Case} )
  set ( InputSubjDir ${dir}/${INPUT_PRE_SUBDIR}/${Case}/${INPUT_POST_SUBDIR})
  set ( OutputSubjDir ${dir}/${OUTPUT_PRE_SUBDIR}/${Case})
  Include (ss4.pipeline.bms)
  MakeDirectory( ${OutputSubjDir}/${PROCESS_SUBDIR} )
  ForEach( i ${seq} )
    echo ( ${i} )
    Set( ABC_Case_DIR ${tempDir}/${Case}/ABC${i} )
    MakeDirectory( ${ABC_Case_DIR} )
    if( ${Registration} == TRUE )
      Include (ss5.pipeline.bms)
    EndIf( ${Registration} == TRUE )
    set (ABCfile ${ABC_Case_DIR}/${Case}.xml)
    If( ${step} < 14 )
      Echo ('Generating '${Case}'.xml...')
      Include (ss6.pipeline.bms)
    EndIf( ${step} < 14 )
    Echo ('Running ABC...')
    Set (abcCmd ${ABC} ${ABCfile})
    Echo (${abcCmd})
    If( ${step} < 15 )
      Run (output ${abcCmd})
      Echo (${output})
    EndIf( ${step} < 15 )
    ####################create and apply mask############################################
    GetFilename( CaseNoDot ${Case}${SUFFIX} NAME_WITHOUT_EXTENSION )
    set( label ${ABC_Case_DIR}/${CaseNoDot}_labels_${ABCSUFFIX}.nrrd )
    set( mask ${tempDir}/${Case}/${Case}${NEW_MASK_TAG_NO_EXT}_orig${i}.nrrd )
    set( Cmd ${SegPostProcessCLP} ${label} ${mask} )
        SetApp(segPostProcessCLP @SegPostProcessCLP)
        SetAppOption(segPostProcessCLP.input ${label})
        SetAppOption(segPostProcessCLP.output ${mask})
    echo( ${segPostProcessCLP} )
    If( ${step} < 16 )
      run( output ${segPostProcessCLP} )
      echo( ${output} )
    EndIf( ${step} < 16 )
    #we erode and dilate to make the mask smoother
    set( erodedMASK ${tempDir}/${Case}/${Case}${NEW_MASK_TAG_NO_EXT}_eroded${i}.nrrd )
    set( Cmd ${ImageMath} ${mask} -erode ${MASK_CLOSING_RADIUS},1 -outfile ${erodedMASK} )
      SetApp(imageMath @ImageMath)
      SetAppOption(imageMath.infile ${mask})
      SetAppOption(imageMath.erode 1)
      SetAppOption(imageMath.erode.erode ${MASK_CLOSING_RADIUS}',1')
      SetAppOption(imageMath.outfile 1)
      SetAppOption(imageMath.outfile.outputfile ${erodedMASK})
    echo( ${imageMath} )
    If( ${step} < 17 )
      run( output ${imageMath} )
      echo( ${output} )
    EndIf( ${step} < 17 )
    set( dilatedMASK ${tempDir}/${Case}/${Case}${NEW_MASK_TAG_NO_EXT}${i}.nrrd )#we save mask in case directory
    set( Cmd ${ImageMath} ${erodedMASK} -dilate ${MASK_CLOSING_RADIUS},1 -outfile ${dilatedMASK} )
      SetApp(imageMath @ImageMath)
      SetAppOption(imageMath.infile ${erodedMASK})
      SetAppOption(imageMath.dilate 1)
      SetAppOption(imageMath.dilate.dilate ${MASK_CLOSING_RADIUS}',1')
      SetAppOption(imageMath.outfile 1)
      SetAppOption(imageMath.outfile.outputfile ${dilatedMASK})
    echo( ${Cmd} )
    If( ${step} < 18 )
      run( output ${Cmd} )
      echo( ${output} )
    EndIf( ${step} < 18 )
    set( CORRECTED ${ABC_Case_DIR}/${CaseNoDot}_corrected_${ABCSUFFIX}.nrrd )
  EndForEach( i ${seq} )
  set( FinalMASK ${OutputSubjDir}/${PROCESS_SUBDIR}/${Case}${NEW_MASK_TAG} )#we save mask in case directory
  set( Cmd ${ResampleVolume2} ${dilatedMASK} ${FinalMASK} -i nn )
    SetApp(rv2 @ResampleVolume2)
    SetAppOption(rv2.inputVolume ${dilatedMASK})
    SetAppOption(rv2.outputVolume ${FinalMASK})
    SetAppOption(rv2.interpolationType 1)
    SetAppOption(rv2.interpolationType.interpolationType 'nn')
  If( ${step} < 19 )
    run( output ${rv2} )
    echo( ${output} )
  EndIf( ${step} < 19 )
  set( CORRECTED ${ABC_Case_DIR}/${CaseNoDot}_corrected_${ABCSUFFIX}.nrrd )
  set( CORRECTED_COPY ${OutputSubjDir}/${PROCESS_SUBDIR}/${Case}${SUFFIX}_corrected.nrrd )
  If( ${biasFieldCorrection} == TRUE )
    set( Cmd ${ResampleVolume2} ${CORRECTED} ${CORRECTED_COPY} -i nn )
    SetApp(rv2 @ResampleVolume2)
    SetAppOption(rv2.inputVolume ${CORRECTED})
    SetAppOption(rv2.outputVolume ${CORRECTED_COPY})
    SetAppOption(rv2.interpolationType 1)
    SetAppOption(rv2.interpolationType.interpolationType 'nn')
    If( ${step} < 20 )
     run( output ${Cmd} )
      echo( ${output} )
    EndIf( ${step} < 20 )
  EndIf( ${biasFieldCorrection} == TRUE )
  if( ${ScriptName} != '' )
    GetFilename( name ${ScriptName} NAME )
    If( ${step} < 21 )
      CopyFile( ${ScriptName} ${OutputSubjDir}/${PROCESS_SUBDIR}/${name} )
      CopyFile( ${ABC_Case_DIR}/${Case}.xml ${OutputSubjDir}/${PROCESS_SUBDIR}/${Case}.xml )
    EndIf( ${step} < 21 )
  Endif( ${ScriptName} != '' )
EndForEach( ${CASES} )
