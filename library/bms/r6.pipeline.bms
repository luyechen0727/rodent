echo('Registration')

If( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
  Set( Reg_Ext nrrd )
  If( ${REGTYPE} == 'FA' )
    Set( MOVING_IMAGE ${TEMPDIR}/${ROOTNAME}_DTI_FA.${Reg_Ext} )
    Set( FLAG -f )
    SetApp(Cmd @dtiprocess)
    SetAppOption(Cmd.dti_image 1)
    SetAppOption(Cmd.dti_image.dti_imageFile ${DTI_DIR}/${DTImage})
    SetAppOption(Cmd.transform 1)
    SetAppOption(Cmd.transform.transform ${TEMPDIR}/${ROOTNAME}_DTI_FA.${Reg_Ext})
    SetAppOption(Cmd.scalarFloat 1)
  EndIf( ${REGTYPE} == 'FA' )
  If( ${REGTYPE} == 'MD' )
    Set( FLAG -m )
    Set( MOVING_IMAGE ${TEMPDIR}/${ROOTNAME}_DTI_MD.${Reg_Ext} )
    SetApp(Cmd @dtiprocess)
    SetAppOption(Cmd.dti_image 1)
    SetAppOption(Cmd.dti_image.dti_imageFile ${DTI_DIR}/${DTImage})
    SetAppOption(Cmd.matrix 1)
    SetAppOption(Cmd.matrix.matrixFile ${TEMPDIR}/${ROOTNAME}_DTI_MD.${Reg_Ext})
    SetAppOption(Cmd.scalarFloat 1)
  EndIf( ${REGTYPE} == 'MD' )
  echo ('Computation image to be registered')
  #Set ( Cmd ${dtiprocessPATH} --dti_image ${DTI_DIR}/${DTImage} ${FLAG} ${MOVING_IMAGE} --scalar-float )
  Run ( output ${Cmd} )
  echo( ${output} )
Else( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
  Set( MOVING_IMAGE ${INPUTDIR}/${B0} )
  Set( Reg_Ext B0_EXT )
EndIf( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
echo("1")
if(${InitialTransform} != '' )
  RegEx( TRANSFORMEDIMAGE ${MOVING_IMAGE} '\.'\${Reg_Ext} REPLACE '' )
  GetFilename( TRANSFORMEDIMAGE ${TRANSFORMEDIMAGE} NAME )
  Set( TRANSFORMEDIMAGE ${TEMPDIR}/${TRANSFORMEDIMAGE}_transformed.nrrd )
  #Set( Cmd ${ResampleVolume2PATH} ${MOVING_IMAGE} ${TRANSFORMEDIMAGE} -f ${InitialTransform} -R ${Grid} )
  SetApp(Cmd @ResampleVolume2)
  SetAppOption(Cmd.inputVolume ${MOVING_IMAGE})
  SetAppOption(Cmd.outputVolume ${TRANSFORMEDIMAGE})
  SetAppOption(Cmd.transformationFile 1)
  SetAppOption(Cmd.transformationFile.transformationFile ${InitialTransform})
  SetAppOption(Cmd.referenceVolume 1)
  SetAppOption(Cmd.referenceVolume.referenceVolume ${Grid})
  Run( output ${Cmd} )
  echo( ${output} )
  Set( MOVING_IMAGE ${TRANSFORMEDIMAGE} )
endif(${InitialTransform} != '' )
echo("2")
If( ${SCALE} == TRUE )
  echo( "1- "${MOVING_IMAGE} )
  echo( "1.1- "${Reg_Ext} )
  RegEx( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE} '\.'\${Reg_Ext} REPLACE '' )
  echo( "2- "${MOVING_IMAGE_ISO_SCALED} )
  GetFilename( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE_ISO_SCALED} NAME )
#  GetFilename( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE} NAME_WITHOUT_EXTENSION )
  if(${InitialTransform} == '' )
    Set( MOVING_IMAGE_ISO_SCALED ${TEMPDIR}/${MOVING_IMAGE_ISO_SCALED}_moving_iso_scale.nrrd )
    #Set( ResampleCmd ${ResampleVolume2PATH} ${MOVING_IMAGE} ${MOVING_IMAGE_ISO_SCALED} -R ${Grid} )
    SetApp(ResampleCmd @ResampleVolume2)
    SetAppOption(ResampleCmd.inputVolume ${MOVING_IMAGE})
    SetAppOption(ResampleCmd.outputVolume ${MOVING_IMAGE_ISO_SCALED})
    SetAppOption(ResampleCmd.referenceVolume 1)
    SetAppOption(ResampleCmd.referenceVolume.referenceVolume ${Grid})
    Run( output ${ResampleCmd} )
    echo( ${output} )
  else( ${InitialTransform} == '' )
    Set( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE} )
  endif(${InitialTransform} == '' )
  #Set( ImageMathCmd ${ImageMathPATH} ${MOVING_IMAGE_ISO_SCALED} -changeSp 1,1,1 -outfile ${MOVING_IMAGE_ISO_SCALED} -type float)
  SetApp(ImageMathCmd @ImageMath)
  SetAppOption(ImageMathCmd.infile ${MOVING_IMAGE_ISO_SCALED})
  SetAppOption(ImageMathCmd.changeSp 1)
  SetAppOption(ImageMathCmd.changeSp.changeSp 1,1,1)
  SetAppOption(ImageMathCmd.outfile 1)
  SetAppOption(ImageMathCmd.outfile.outputfile ${MOVING_IMAGE_ISO_SCALED})
  SetAppOption(ImageMathCmd.type 1)
  SetAppOption(ImageMathCmd.type.giveType float)
  Run( output ${ImageMathCmd} )
  echo( ${output} )
  Set( FIXED ${ATLAS_ISO_SCALED} )
  Set( MOVING_IMAGE ${MOVING_IMAGE_ISO_SCALED} )
  echo( ${MOVING_IMAGE} )
Else( ${SCALE} == TRUE )
  Set( FIXED ${TEMPLATEDIR}/${TEMPLATE} )
#  Set( MOVING_IMAGE ${MOVING_IMAGE} )
EndIf( ${SCALE} == TRUE )
echo("3")
if( ${SKULLSTRIP} == TRUE )
  echo(going to r7) 
  include( r7.pipeline.bms )
  echo(back to r6)
  ##Apply mask
  RegEx( MASKED_MOVING ${MOVING_IMAGE} '\.'\${Reg_Ext} REPLACE '' )
  GetFilename( MASKED_MOVING ${MASKED_MOVING} NAME )
#  GetFilename( MASKED_MOVING ${MOVING_IMAGE} NAME_WITHOUT_EXTENSION )
  Set( MASKED_MOVING ${TEMPDIR}/${MASKED_MOVING}_skullstripped.nrrd )
  #Set( Cmd ${ImageMathPATH} ${MOVING_IMAGE} -mask ${TEMPDIR}/${ROOTNAME}_Mask.nrrd -outfile ${MASKED_MOVING} -type float )
  SetApp(Cmd @ImageMath)
  SetAppOption(Cmd.infile ${MOVING_IMAGE})
  SetAppOption(Cmd.mask 1)
  SetAppOption(Cmd.mask.mask ${TEMPDIR}/${ROOTNAME}_Mask.nrrd)
  SetAppOption(Cmd.outfile 1)
  SetAppOption(Cmd.outfile.outputfile ${MASKED_MOVING})
  SetAppOption(Cmd.type 1)
  SetAppOption(Cmd.type.giveType float)
  Run( output ${Cmd} )
  echo( ${output} )
  Set( MOVING_IMAGE ${MASKED_MOVING} )
endif( ${SKULLSTRIP} == TRUE )
echo("4")
#echo('Histogram Matching')
#GetFilename( MOVING_IMAGE_hm ${MOVING_IMAGE} NAME_WITHOUT_EXTENSION )
#Set( MOVING_IMAGE_hm ${TEMPDIR}/${MOVING_IMAGE_hm}_hm.nrrd )
#Set( HMCmd ${HistogramMatchingPATH} ${MOVING_IMAGE} ${TEMPLATEDIR}/${TEMPLATE} ${MOVING_IMAGE_hm} --#numberOfHistogramLevels 1024 --numberOfMatchPoints 50 --threshold )
#Run( output ${HMCmd} )
#echo( ${output} )



echo('Registration')
#Set( RegCmd ${RegisterImagesPATH} ${FIXED} ${MOVING_IMAGE} --saveTransform ${TRANSFORMFILE} --sampleFromOverlap --registration PipelineRigid --rigidMaxIterations 200 --rigidSamplingRatio 0.2 --resampledImage ${TEMPDIR}/ResampledImage.nrrd)
SetApp(RegCmd @RegisterImages)
SetAppOption(RegCmd.fixedImage ${FIXED})
SetAppOption(RegCmd.movingImage ${MOVING_IMAGE})
SetAppOption(RegCmd.saveTransform 1)
SetAppOption(RegCmd.saveTransform.saveTransform ${TRANSFORMFILE})
SetAppOption(RegCmd.sampleFromOverlap 1)
SetAppOption(RegCmd.registration 1)
SetAppOption(RegCmd.registration.registration PipelineRigid)
SetAppOption(RegCmd.rigidMaxIterations 1)
SetAppOption(RegCmd.rigidMaxIterations.rigidMaxIterations 200)
SetAppOption(RegCmd.rigidSamplingRatio 1)
SetAppOption(RegCmd.rigidSamplingRatio.rigidSamplingRatio 0.2)
SetAppOption(RegCmd.resampledImage 1)
SetAppOption(RegCmd.resampledImage.resampledImage ${TEMPDIR}/ResampledImage.nrrd)
CondorPostScript(RegCmd ${cfg_exe} ${cfg_condorpostscript} ${cfg_output_directory} ${TRANSFORMFILE} ${OneCase_outputFolderIds})
Run( output ${RegCmd} )
echo( ${output} )
