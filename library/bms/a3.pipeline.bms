### The script uses:
#- ANTS
#- Double2FloatTransform
#- AtlasWerks
#- ImageMath
#- ResampleVolume2
#- BRAINSDemonWarp
#- ITKTransformTools
#########################Mask image used to compute atlas#############
echo()
echo('a3')
echo()

MakeDirectory( ${atlasProcessDir} )
set (iterations 0)
foreach( i ${CASES} )



  GetParam (PresentCase ${casesInputs} ${iterations})
  RegEx ( WithoutPath ${PresentCase} '/.+/' REPLACE '' )
  RegEx ( InSubjDir ${PresentCase} ${WithoutPath} REPLACE '' ) 

  Set(OutSubjDir ${dir}/${i})
  Set(PROCESS_SUBDIR Average)
  MakeDirectory( ${OutSubjDir} )
  echo()
  echo('Case ' ${i} ' Created outsubjdir : ' ${OutSubjDir} ' and insubjdir = ' ${InSubjDir})
  echo()
  MakeDirectory( ${OutSubjDir}/${PROCESS_SUBDIR} )
  echo()
  echo('Created outsubjdir/Process_Subdir : ' ${OutSubjDir}/${PROCESS_SUBDIR} )
  echo()
 
  GetParam(MASK ${casesMasks} ${iterations})
  ##Save config file in each sub dir of each case
  set( MD ${InSubjDir}/${i}${ATLAS_INPUT_SUFFIX} )
#  set( MASK ${InSubjDir}/${i}${NEW_MASK_TAG} )#we save mask in case directory
  set( maskedMD ${atlasProcessDir}/${i}${ATLAS_INPUT_MASKED_TAG}.nrrd )
 # set( Cmd ${ImageMath} ${MD} -mask ${MASK} -outfile ${maskedMD} -type float)

      SetApp(imageMath @ImageMath)
      SetAppOption(imageMath.infile ${MD})
      SetAppOption(imageMath.outfile 1)
      SetAppOption(imageMath.outfile.outputfile ${maskedMD})
      SetAppOption(imageMath.mask 1)
      SetAppOption(imageMath.mask.mask ${MASK})
      SetAppOption(imageMath.type 1)
      SetAppOption(imageMath.type.giveType 'float')
  echo( ${imageMath} )
  If( ${step} < 1 )
    run( output ${imageMath} )
    echo( ${output} )
  EndIf( ${step} < 1 )
  if( ${Mradius} != 0 )
    set( MedianMD ${atlasProcessDir}/${i}${ATLAS_INPUT_MASKED_TAG}_median.nrrd )
 #   set( Cmd ${MedianImageFilter} --neighborhood ${Mradius},${Mradius},${Mradius} ${maskedMD} ${MedianMD} )

    SetApp(medianImageFilter @MedianImageFilter)
    SetAppOption(medianImageFilter.neighborhood 1)
    SetAppOption(medianImageFilter.neighborhood.neighborhood ${Mradius}','${Mradius}','${Mradius})
    SetAppOption(medianImageFilter.input ${maskedMD})
    SetAppOption(medianImageFilter.output ${MedianMD})
    echo( ${medianImageFilter} )
    If( ${step} < 2 )
      run( output ${medianImageFilter} )
      echo( ${output} )
    EndIf( ${step} < 2 )

  else( ${Mradius} != 0 )
    set( MedianMD ${maskedMD} )
  endif( ${Mradius} != 0 )
  set( paddedMD ${atlasProcessDir}/${i}${ATLAS_INPUT_MASKED_TAG}_padded.nrrd )
  #set( Cmd ${unu} pad -i ${MedianMD} -o ${paddedMD} -min -10 -10 -10 -max M+10 M+10 M+10 -b pad )
    SetApp(unu @unu)
    SetAppOption(unu.pad 1)
    SetAppOption(unu.input 1)
    SetAppOption(unu.input.inputFile ${MedianMD})
    SetAppOption(unu.output 1)
    SetAppOption(unu.output.outputFile ${paddedMD})
    SetAppOption(unu.min 1)
    SetAppOption(unu.min.minValues '-10' '-10' '-10')
    SetAppOption(unu.max 1)
    SetAppOption(unu.max.maxValues 'M+10' 'M+10' 'M+10')
    SetAppOption(unu.b 1)
    SetAppOption(unu.b.pad 'pad')
    echo( ${unu} )

  echo( ${unu} )
  If( ${step} < 3 )
    run( output ${unu} )
    echo( ${output} )
  EndIf( ${step} < 3 )
  Inc(${iterations} 1)
endforeach( ${CASES} )

set( ATLAS_INPUT_MASKED_TAG ${ATLAS_INPUT_MASKED_TAG}_padded )
#########################affine registration###############################
##affinely register all cases once they are skullstripped
GetParam(FIXED_CASE ${CASES} 0)
set( FIXED_IMG ${atlasProcessDir}/${FIXED_CASE}${ATLAS_INPUT_MASKED_TAG}.nrrd )
set( RESCALED_FIXED_IMG ${atlasProcessDir}/${FIXED_CASE}${ATLAS_INPUT_MASKED_TAG}_hm_resc.nrrd )
set( times 0 )
echo('including a4')
include( a4.pipeline.bms )
echo('back to a3')

set( avgImage ${atlasProcessDir}/AverageAffineImage.nrrd )
#set( Cmd ${ImageMath} ${FIRST_CASE} -avg ${ALL_OTHER_CASES} -outfile ${avgImage} )
      SetApp(imageMath @ImageMath)
      SetAppOption(imageMath.infile ${FIRST_CASE})
      SetAppOption(imageMath.outfile 1)
      SetAppOption(imageMath.outfile.outputfile ${avgImage})
      SetAppOption(imageMath.avg 1)
      SetAppOption(imageMath.avg.avg ${ALL_OTHER_CASES})
      run( output ${imageMath} )

If( ${step} < 9 )
  Run( output ${imageMath} )
  echo( ${output} )
EndIf( ${step} < 9 )
set(FIXED_CASE AverageAffineImage )
set( FIXED_IMG ${avgImage} )
set( RESCALED_FIXED_IMG ${atlasProcessDir}/AverageAffineImage_resc.nrrd )
echo('including a4')
include( a4.pipeline.bms )
echo('back to a3')
####################Create atlas##############################################
set(outputDir ${cfg_output_directory}/APipelineOut)

MakeDirectory( ${outputDir} )
echo('including a7')
include( a7.pipeline.bms )
echo('back to a3')
#set ( atlasWerksCmd ${AtlasWerks} -f ${atlasProcessDir}/AW_test.xml)
      SetApp(aw @AtlasWerks)
    #  SetAppOption(aw.input ${AtlasWerks})
      SetAppOption(aw.xml 1)
      SetAppOption(aw.xml.xmlFile ${atlasProcessDir}/AW_test.xml)
      
If( ${step} < 14 )
  run ( output ${aw})
  echo ( ${output} )
Endif( ${step} < 14 )

###################Save H-Fields#########################################
set( count 0 )
foreach( i ${CASES} )
  Set (OutSubjDir ${outputDir}/${i}) 
### NB : outputDir = dir
  GetParam(OneTransform ${casesTransforms} ${count})
  GetParam(OneCase_outputFolderIds ${cases_outputFolderIds} ${count})
  if( ${OneTransform} != '' )
    set( combinedTransforms -f ${OneTransform} )
  else( ${OneTransform} != '' )
    set( combinedTransforms '' )
  Endif( ${OneTransform} != '' )
  If( ${count} < 10 )
    set( suffix 000${count} )
  Endif( ${count} )
  if( ${count} >= 10 AND ${count} < 100 )
    set( suffix 00${count} )
  Endif( ${count} )
  if( ${count} >= 100 AND ${count} < 1000 )
    set( suffix 0${count} )
  Endif( ${count} )
  if( ${count} >= 1000 )
    set( suffix ${count} )
  Endif( ${count} )
  set( hfield ${atlasProcessDir}/h_${suffix}.mhd )





  Set( COPIED_HFIELD ${OutSubjDir}/${PROCESS_SUBDIR}/${i}_hFieldToAtlas.mha )
 # Set( Cmd ${ResampleVolume2} ${hfield} ${COPIED_HFIELD} -i nn )
    SetApp(rv2 @ResampleVolume2)
    SetAppOption(rv2.inputVolume ${hfield})
    SetAppOption(rv2.outputVolume ${COPIED_HFIELD})
    SetAppOption(rv2.interpolationType 1)
    SetAppOption(rv2.interpolationType.interpolationType 'nn')
    echo( ${rv2} )

  If( ${step} < 15 )
    CondorPostScript(rv2 ${cfg_exe} ${cfg_condorpostscript} ${cfg_output_directory} ${COPIED_HFIELD} ${OneCase_outputFolderIds})
    Run( output ${rv2} )
    echo( ${output} )
  EndIf( ${step} < 15 )
  set( invhfield ${atlasProcessDir}/inv_h_${suffix}.mhd )
  Set( COPIED_INV_HFIELD ${OutSubjDir}/${PROCESS_SUBDIR}/${i}_inv_hFieldToAtlas.mha )
  #Set( Cmd ${ResampleVolume2} ${invhfield} ${COPIED_INV_HFIELD} -i nn )
    SetApp(rv2 @ResampleVolume2)
    SetAppOption(rv2.inputVolume ${invhfield})
    SetAppOption(rv2.outputVolume ${COPIED_INV_HFIELD})
    SetAppOption(rv2.interpolationType 1)
    SetAppOption(rv2.interpolationType.interpolationType 'nn')
    echo( ${rv2} )
  If( ${step} < 16 )
    CondorPostScript(rv2 ${cfg_exe} ${cfg_condorpostscript} ${cfg_output_directory} ${COPIED_INV_HFIELD} ${OneCase_outputFolderIds})
    Run( output ${rv2} )
    echo( ${output} )
  EndIf( ${step} < 16 )

  Inc(${count} 1)
  Int( ${count} )
endforeach( ${CASES} )
########################################################################
if( ${IS_SCALAR} != TRUE )
  echo('including a5')
  include( a5.pipeline.bms )
  echo('back to a3')
else( ${IS_SCALAR} != TRUE )
  echo('including a6')
  include( a6.pipeline.bms )
  echo('back to a3')
Endif( ${IS_SCALAR} != TRUE )

GetParam(SCALED_CASE ${CASES} 0)
IF( ${IS_SCALED} == TRUE )
  If( ${step} < 44 )
    Set(${IMAGE_GRID} ${imagegridfile})
    CopyFile(${IMAGE_GRID} ${outputDir}/ImageGrid.nrrd )
  EndIf( ${step} < 44 )
ENDIF( ${IS_SCALED} == TRUE )

Set( ImageForMask ${atlasProcessDir}/avg_.mhd )
Set( ImageForMaskNrrd ${atlasProcessDir}/avg_.nrrd )
Set( Mask ${atlasProcessDir}/mask.nrrd )

#Set( Cmd ${ResampleVolume2} ${ImageForMask} ${ImageForMaskNrrd} -i nn )
    SetApp(rv2 @ResampleVolume2)
    SetAppOption(rv2.inputVolume ${ImageForMask})
    SetAppOption(rv2.outputVolume ${ImageForMaskNrrd})
    SetAppOption(rv2.interpolationType 1)
    SetAppOption(rv2.interpolationType.interpolationType 'nn')
    echo( ${rv2} )
Run( output ${rv2} )
echo( ${output} )

#Set( Cmd ${unu} 1op if -i ${ImageForMaskNrrd} -o ${Mask} )
    SetApp(Unu @unu)
    SetAppOption(unu.1op 1)
#    SetAppOption(unu.1op.if 1)
   SetAppOption(unu.if 1)
    SetAppOption(unu.input 1)
    SetAppOption(unu.input.inputFile ${ImageForMaskNrrd})
    SetAppOption(unu.output 1)
    SetAppOption(unu.output.outputFile ${Mask})
    echo( ${unu} )
If( ${step} < 45 )
  Run( output ${unu} )
  echo( ${output} )
EndIf( ${step} < 45 )

Set( SmoothMask ${outputDir}/Mask.nrrd )
#Set( Cmd ${MedianImageFilter} ${Mask} --neighborhood 2,2,2 ${SmoothMask} )
    SetApp(medianImageFilter @MedianImageFilter)
    SetAppOption(medianImageFilter.input ${Mask})
    SetAppOption(medianImageFilter.neighborhood 1)
    SetAppOption(medianImageFilter.neighborhood.neighborhood '2,2,2')
    SetAppOption(medianImageFilter.output ${SmoothMask})
    echo( ${medianImageFilter} )
If( ${step} < 46 )
  CondorPostScript(medianImageFilter ${cfg_exe} ${cfg_condorpostscript} ${cfg_output_directory} ${SmoothMask} ${sibling_outputFolderId})
  Run( output ${medianImageFilter} )
  echo( ${output} )
EndIf( ${step} < 46 )
